main {

  appName = "AkkaEventhubs"
  appName = ${?APP_NAME}

}

akka {

  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = ${?AKKA_LOG_LEVEL}
  loglevel = "INFO"

  actor {

    serializers {
    }
    serialization-bindings {
    }
  }

}

redis {
  host = "localhost"
  host = ${?REDIS_HOST}
  port = 6379
  port = ${?REDIS_PORT}
  # optional
  password = "topsecret"
  password = ${?REDIS_PASSWORD}
  db = 1
  db = ${?REDIS_DB}
}

akka.persistence.journal.plugin = "akka-persistence-redis.journal"
akka.persistence.snapshot-store.plugin = "akka-persistence-redis.snapshot"

//akka.persistence.journal.plugin = "akka-contrib-mongodb-persistence-journal"
//akka.persistence.snapshot-store.plugin = "akka-contrib-mongodb-persistence-snapshot"

// note: "akka_persistence_realtime" and "akka_persistence_metadata" are not controlled here.  todo: reseaerch "suffixed collection names"
akka.contrib.persistence.mongodb.mongo.mongouri = ${MONGOURI}
akka.contrib.persistence.mongodb.mongo.journal-collection = "my_example_persistent_journal"
akka.contrib.persistence.mongodb.mongo.journal-index = "my_example_journal_index"
akka.contrib.persistence.mongodb.mongo.snaps-collection = "my_example_persistent_snapshots"
akka.contrib.persistence.mongodb.mongo.snaps-index = "my_example_snaps_index"
akka.contrib.persistence.mongodb.mongo.journal-write-concern = "Acknowledged"
akka.contrib.persistence.mongodb.mongo.journal-wtimeout = 3s
akka.contrib.persistence.mongodb.mongo.journal-fsync = false
akka.contrib.persistence.mongodb.mongo.snaps-wtimeout = 3s
akka.contrib.persistence.mongodb.mongo.snaps-fsync = false

akka.contrib.persistence.mongodb.mongo.breaker.maxTries = 1
akka.contrib.persistence.mongodb.mongo.breaker.timeout.call = 10s

eventhubs {

  dispatcher {
    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
      core-pool-size-min = 4
      core-pool-size-factor = 2.0
      core-pool-size-max = 8
    }
    throughput = 10
    mailbox-capacity = -1
    mailbox-type = ""
  }

}

eventhubs-1 {

  snapshotInterval = 100
  snapshotInterval = ${?SNAP_SHOT_INTERVAL}

  persist = false
  persist = ${?EVENTHUBS_1_PERSIST}

  persistFreq = 1
  persistFreq = ${?EVENTHUBS_1_PERSIST_FREQ}

  offsetPersistenceId = "my_example_eventhubsOffset"

  connection {

    defaultOffset = "LATEST"
    defaultOffset = ${?EVENTHUBS_1_DEFAULT_OFFSET}

    endpoint = ${EVENTHUBS_1_ENDPOINT}

    name = ${EVENTHUBS_1_NAME}

    namespace = ${EVENTHUBS_1_NAMESPACE}

    partitions = ${EVENTHUBS_1_PARTITION_COUNT}

    accessPolicy = ${EVENTHUBS_1_ACCESS_POLICY}

    accessKey = ${EVENTHUBS_1_ACCESS_KEY}

    consumerGroup = "$Default"
    consumerGroup = ${?EVENTHUBS_1_CONSUMER_GROUP}

    receiverTimeout = 120s
    receiverTimeout = ${?EVENTHUBS_1_RECEIVER_TIMEOUT}

    receiverBatchSize = 1
    receiverBatchSize = ${?EVENTHUBS_1_RECEIVER_BATCH_SIZE}

    readersPerPartition = 1
    readersPerPartition = ${?EVENTHUBS_1_READERS_PER_PARTITION}
  }

  dispatcher {
    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
      core-pool-size-min = 4
      core-pool-size-factor = 2.0
      core-pool-size-max = 8
    }
    throughput = 10
    mailbox-capacity = -1
    mailbox-type = ""
  }

}

eventhubs-2 {

  snapshotInterval = 100
  snapshotInterval = ${?SNAP_SHOT_INTERVAL}

  persist = false
  persist = ${?EVENTHUBS_2_PERSIST}

  persistFreq = 1
  persistFreq = ${?EVENTHUBS_2_PERSIST_FREQ}

  offsetPersistenceId = "my_example_eventhubsOffset"

  connection {

    endpoint = ${?EVENTHUBS_2_ENDPOINT}

    name = ${?EVENTHUBS_2_NAME}

    namespace = ${?EVENTHUBS_2_NAMESPACE}

    partitions = ${?EVENTHUBS_2_PARTITION_COUNT}

    accessPolicy = ${?EVENTHUBS_2_ACCESS_POLICY}

    accessKey = ${?EVENTHUBS_2_ACCESS_KEY}

    consumerGroup = "$Default"
    consumerGroup = ${?EVENTHUBS_2_CONSUMER_GROUP}

    receiverTimeout = 120s
    receiverTimeout = ${?EVENTHUBS_2_RECEIVER_TIMEOUT}

    receiverBatchSize = 1
    receiverBatchSize = ${?EVENTHUBS_2_RECEIVER_BATCH_SIZE}

    readersPerPartition = 1
    readersPerPartition = ${?EVENTHUBS_2_READERS_PER_PARTITION}
  }

  dispatcher {
    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
      core-pool-size-min = 4
      core-pool-size-factor = 2.0
      core-pool-size-max = 8
    }
    throughput = 10
    mailbox-capacity = -1
    mailbox-type = ""
  }

}
